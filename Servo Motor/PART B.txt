#include "SysTick.h"
#include "tm4c123gh6pm.h"
#include "PLL.h"

#define OUT		  		(*((volatile unsigned long *)0x4000503C))
#define SW1		(*((volatile unsigned long *) 0x40025040))
#define SW2		(*((volatile unsigned long *) 0x40025004))

struct State{
  unsigned char out;    
  unsigned short wait;   // in 10ms units       
  unsigned char next[4]; 
};
typedef const struct State StateType;

StateType Fsm[8] = {         // 0 is pressed, 1 is not pressed
  {0x08, 2, {7, 1, 7, 1} }, // 00 works
  {0x0C, 2, {7, 3, 0, 2} }, // 01 works
  {0x04, 2, {7, 1, 1, 3} }, // 10, Works
  {0x06, 2, {1, 5, 2, 4} }, // 11, Works
	{0x02, 2, {7, 1, 3, 5} },
	{0x03, 2, {3, 7, 4, 6} },
	{0x01, 2, {7, 1, 5, 7} },
  {0x09, 2, {5, 1, 6, 0} } 
};

unsigned long cState;      // current State (0 to 8)
//   Function Prototypes
void PORTF_Init(void);
void PORTB_Init(void);

// 3. Subroutines Section
int main(void){    
  unsigned long input;
  PLL_Init();
  SysTick_Init();                  // Enable SysTick
  PORTB_Init();                    // initialize motor outputs on Port B
  PORTF_Init();                    // initialize sensor inputs on Port F
  cState = 0;  
	
  while(1){
		OUT = Fsm[cState].out; // step motor
    // wait for time according to state
    SysTick_Wait10ms(Fsm[cState].wait);
    // get input    
		if(SW1 == 0x00 && SW2 == 0x00)
			input = 0 ; // Input 4,0
		else if(SW1 != 0x00 && SW2 == 0x00)
			input = 2;
		else if(SW1 == 0x00 && SW2 != 0x00)
			input = 1;
		else
			input = 3;
    // change the state based on input and current state
    cState = Fsm[cState].next[input];
  }
}

void PORTB_Init()
{
	volatile unsigned long delay;
	SYSCTL_RCGC2_R |= 0x00000002;
	delay = SYSCTL_RCGC2_R;
	GPIO_PORTB_AMSEL_R &= 0x00;
	GPIO_PORTB_PCTL_R &= 0x00;
	GPIO_PORTB_DIR_R = 0x0F;
	GPIO_PORTB_AFSEL_R &= 0x00;
	GPIO_PORTB_DR8R_R = 0xFF;
	GPIO_PORTB_DEN_R |= 0x0F;
}

void PORTF_Init()
{
	volatile unsigned long delay;
	SYSCTL_RCGC2_R |= 0x00000020;
	delay = SYSCTL_RCGC2_R;
	GPIO_PORTF_LOCK_R = 0x4C4F434B;
	GPIO_PORTF_CR_R = 0x1F;
	GPIO_PORTF_AMSEL_R &= 0x00;
	GPIO_PORTF_PCTL_R &= 0x00;
	GPIO_PORTF_DIR_R = 0x0E;
	GPIO_PORTF_AFSEL_R &= 0x00;
	GPIO_PORTF_PUR_R = 0x11;
	GPIO_PORTF_DEN_R |= 0x1F;
}
